// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

/**
 * @title CrossChainBridge
 * @dev A decentralized bridge for transferring tokens between different blockchains
 * @author Cross-Chain Bridge Team
 */
contract CrossChainBridge is ReentrancyGuard, Ownable, Pausable {
    
    // Struct to represent a cross-chain transfer request
    struct TransferRequest {
        address sender;
        address recipient;
        address token;
        uint256 amount;
        uint256 targetChainId;
        uint256 nonce;
        bool processed;
        uint256 timestamp;
    }
    
    // Mapping from transfer hash to transfer request
    mapping(bytes32 => TransferRequest) public transferRequests;
    
    // Mapping to track processed transfers to prevent replay attacks
    mapping(bytes32 => bool) public processedTransfers;
    
    // Mapping to track supported tokens on this chain
    mapping(address => bool) public supportedTokens;
    
    // Mapping to track supported target chains
    mapping(uint256 => bool) public supportedChains;
    
    // Mapping for user nonces to prevent replay attacks
    mapping(address => uint256) public userNonces;
    
    // Bridge fee in basis points (100 = 1%)
    uint256 public bridgeFee = 30; // 0.3%
    uint256 public constant MAX_FEE = 1000; // 10% maximum fee
    
    // Minimum and maximum transfer amounts
    uint256 public minTransferAmount = 1000; // Minimum 0.001 tokens (assuming 18 decimals)
    uint256 public maxTransferAmount = 1000000 * 10**18; // Maximum 1M tokens
    
    // Events
    event TransferInitiated(
        bytes32 indexed transferHash,
        address indexed sender,
        address indexed recipient,
        address token,
        uint256 amount,
        uint256 targetChainId,
        uint256 nonce
    );
    
    event TransferCompleted(
        bytes32 indexed transferHash,
        address indexed recipient,
        address token,
        uint256 amount
    );
    
    event TokenSupported(address indexed token, bool supported);
    event ChainSupported(uint256 indexed chainId, bool supported);
    event BridgeFeeUpdated(uint256 oldFee, uint256 newFee);
    
    constructor(address initialOwner) Ownable(initialOwner) {
        // Add current chain as supported by default
        supportedChains[block.chainid] = true;
    }
    
    /**
     * @dev Core Function 1: Initiate a cross-chain transfer
     * @param recipient Address to receive tokens on target chain
     * @param token Address of the token to transfer  
     * @param amount Amount of tokens to transfer
     * @param targetChainId Target blockchain chain ID
     */
    function initiateTransfer(
        address recipient,
        address token,
        uint256 amount,
        uint256 targetChainId
    ) external nonReentrant whenNotPaused {
        require(recipient != address(0), "Invalid recipient");
        require(supportedTokens[token], "Token not supported");
        require(supportedChains[targetChainId], "Target chain not supported");
        require(targetChainId != block.chainid, "Cannot bridge to same chain");
        require(amount >= minTransferAmount && amount <= maxTransferAmount, "Amount out of range");
        
        // Calculate fee
        uint256 fee = (amount * bridgeFee) / 10000;
        uint256 transferAmount = amount - fee;
        
        // Get user nonce and increment
        uint256 nonce = userNonces[msg.sender]++;
        
        // Create transfer hash
        bytes32 transferHash = keccak256(
            abi.encodePacked(
                msg.sender,
                recipient,
                token,
                amount,
                targetChainId,
                nonce,
                block.chainid
            )
        );
        
        // Store transfer request
        transferRequests[transferHash] = TransferRequest({
            sender: msg.sender,
            recipient: recipient,
            token: token,
            amount: transferAmount,
            targetChainId: targetChainId,
            nonce: nonce,
            processed: false,
            timestamp: block.timestamp
        });
        
        // Transfer tokens from user to bridge (including fee)
        IERC20(token).transferFrom(msg.sender, address(this), amount);
        
        emit TransferInitiated(
            transferHash,
            msg.sender,
            recipient,
            token,
            transferAmount,
            targetChainId,
            nonce
        );
    }
    
    /**
     * @dev Core Function 2: Complete a cross-chain transfer (called by validators/relayers)
     * @param transferHash Hash of the original transfer request
     * @param sender Original sender address
     * @param recipient Address to receive tokens
     * @param token Address of the token
     * @param amount Amount of tokens to transfer
     * @param sourceChainId Source blockchain chain ID
     * @param nonce Transfer nonce
     */
    function completeTransfer(
        bytes32 transferHash,
        address sender,
        address recipient,
        address token,
        uint256 amount,
        uint256 sourceChainId,
        uint256 nonce
    ) external onlyOwner nonReentrant whenNotPaused {
        require(!processedTransfers[transferHash], "Transfer already processed");
        require(supportedTokens[token], "Token not supported");
        require(supportedChains[sourceChainId], "Source chain not supported");
        require(recipient != address(0), "Invalid recipient");
        
        // Verify transfer hash
        bytes32 computedHash = keccak256(
            abi.encodePacked(
                sender,
                recipient,
                token,
                amount,
                block.chainid,
                nonce,
                sourceChainId
            )
        );
        require(computedHash == transferHash, "Invalid transfer hash");
        
        // Mark as processed
        processedTransfers[transferHash] = true;
        
        // Transfer tokens to recipient
        IERC20(token).transfer(recipient, amount);
        
        emit TransferCompleted(transferHash, recipient, token, amount);
    }
    
    /**
     * @dev Core Function 3: Manage supported tokens and chains
     * @param token Address of the token to add/remove support
     * @param supported Whether the token should be supported
     */
    function setSupportedToken(address token, bool supported) external onlyOwner {
        require(token != address(0), "Invalid token address");
        supportedTokens[token] = supported;
        emit TokenSupported(token, supported);
    }
    
    /**
     * @dev Set supported chain
     * @param chainId Chain ID to add/remove support
     * @param supported Whether the chain should be supported
     */
    function setSupportedChain(uint256 chainId, bool supported) external onlyOwner {
        require(chainId != 0, "Invalid chain ID");
        supportedChains[chainId] = supported;
        emit ChainSupported(chainId, supported);
    }
    
    /**
     * @dev Update bridge fee (only owner)
     * @param newFee New fee in basis points
     */
    function setBridgeFee(uint256 newFee) external onlyOwner {
        require(newFee <= MAX_FEE, "Fee too high");
        uint256 oldFee = bridgeFee;
        bridgeFee = newFee;
        emit BridgeFeeUpdated(oldFee, newFee);
    }
    
    /**
     * @dev Set transfer limits
     * @param minAmount Minimum transfer amount
     * @param maxAmount Maximum transfer amount
     */
    function setTransferLimits(uint256 minAmount, uint256 maxAmount) external onlyOwner {
        require(minAmount < maxAmount, "Invalid limits");
        minTransferAmount = minAmount;
        maxTransferAmount = maxAmount;
    }
    
    /**
     * @dev Emergency pause function
     */
    function pause() external onlyOwner {
        _pause();
    }
    
    /**
     * @dev Unpause function
     */
    function unpause() external onlyOwner {
        _unpause();
    }
    
    /**
     * @dev Withdraw collected fees (only owner)
     * @param token Token address to withdraw
     * @param amount Amount to withdraw
     */
    function withdrawFees(address token, uint256 amount) external onlyOwner {
        require(supportedTokens[token], "Token not supported");
        IERC20(token).transfer(owner(), amount);
    }
    
    /**
     * @dev Get transfer request details
     * @param transferHash Hash of the transfer
     */
    function getTransferRequest(bytes32 transferHash) external view returns (TransferRequest memory) {
        return transferRequests[transferHash];
    }
    
    /**
     * @dev Check if transfer is processed
     * @param transferHash Hash of the transfer
     */
    function isTransferProcessed(bytes32 transferHash) external view returns (bool) {
        return processedTransfers[transferHash];
    }
}
